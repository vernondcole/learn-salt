{#- this is the jinja template used to create the configuration file
     <salt_config_directory>/minion.d/02_configure_bevy_member.conf and .../master.d/...
     -#}
# {{ pillar['salt_managed_message'] }}
# created from template bevy_master/files/02_configure_bevy_member.conf.jinja

# these settings are specific to the running Salt master or stand-alone minion

{% set bevy_root = salt['config.get']('bevy_root', '/projects/learn-salt/bevy_srv') %}
id: {{ salt['config.get']('node_name', salt['config.get']('id')) }}
{% set is_master = salt['config.get']('id', '').startswith('bevymaster') %}
{% if is_master %}master: localhost
{# ipv6: true  # enable IPv6 dual-stack
interface: '::' #}
{% else %}
master: {{ salt['config.get']('my_master_url', salt['config.get']('master')) }}
{% endif %}
grains:
  datacenter: bevy
  bevy: {{ salt['config.get']('bevy') }}
  environment: dev
salt_config_directory: {{ salt['config.get']('salt_config_directory') }}  # remember where I am at
run_second_minion: {{ salt['config.get']('run_second_minion', False) }}

{% if is_master -%}
{% if salt['pillar.get']('autosign_minion_ids', false) %}
{# This quick and dirty way to pre-accept minions with known names is insecure. #}
autosign_file: {{ salt['config.get']('salt_config_directory') }}/pki/master/autosign.minions
{% endif %}
{% else %}
  {% if salt['config.get']('run_second_minion', False) %}
pidfile: /var/run/salt-minion2.pid  # settings for second minion
pki_dir: {{ salt['config.get']('salt_config_directory') }}/pki/minion2
sock_dir: /var/run/salt-minion2
log_file: /var/log/salt/minion2
  {% endif %}
{% endif -%}

worker_threads: 2  {# sufficient for test systems #}

mine_interval: 5   # this is a test system, so run the mine every five minutes

{% if is_master %}
# for master we need to tell Salt where to find its files
#
file_roots:    # search this list of directory entries in order
  base:
    - /srv/salt         # first, use the normal place (if it exists)
    {%- for entry in salt['pillar.get']('application_roots', []) %}
    {%- set appdir, dummy = entry.split(';') %}
    - {{ appdir }}/salt
    {%- endfor %}
    - '{{ bevy_root }}/salt'
top_file_merging_strategy: same  # do not merge the top.sls file from srv/salt

pillar_roots:  # merge definitions from this list of directories
  base:
    - /srv/pillar
    {%- for entry in salt['pillar.get']('application_roots', []) %}
    {%- appdir, dummy = entry.split(';') %}
    - {{ appdir }}/pillar
    {%- endfor %}
    - '{{ bevy_root }}/pillar'
pillar_source_merging_strategy: recurse
{% endif %}
file_ignore_regex:
  - '/\.git($|/)'
